SQL Parser:
    a.防御SQL注入:WallFilter 基于SQL语法分析，理解其中的SQL语义，然后做处理的，智能，准确，误报率低。
              1.多租户隔离
                  使用WallFilter能让Select/Delete/Update的SQL自动加上租户隔离字段
              2.WallFilter目前支持mysql和oracle、sql server，下一步会支持postgres。
                  WallFilter针对不同的数据库使用不同的SQL Parser和相关配置信息，力求完整理解其SQL语义，从而做更准确的防御手段。
              3.性能
                  WallFilter在运行之后，会使用LRU Cache算法维护一个白名单列表，白名单最多1000个SQL。正常的SQL在白名单中，每次检测只需要一次加锁和一次hash查找，预计在50 nano以内。在白名单之外的SQL检测，预计在50微秒以内。
                  LRU是最近最少使用页面置换算法(Least Recently Used),也就是首先淘汰最长时间未被使用的页面!
                  LFU是最近最不常用页面置换算法(Least Frequently Used),也就是淘汰一定时期内被访问次数最少的页
              4.配置wallfilter https://github.com/alibaba/druid/wiki/%E9%85%8D%E7%BD%AE-wallfilter
                  4.1使用缺省配置的WallFilter
                      <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
                            ...
                            <property name="filters" value="wall"/>
                      </bean>
                  4.2结合其他Filter一起使用
                      WallFilter可以结合其他Filter一起使用，例如：
                      <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
                            ...
                            <property name="filters" value="wall,stat"/>
                      </bean>
                      这样，拦截检测的时间不在StatFilter统计的SQL执行时间内。

                      如果希望StatFilter统计的SQL执行时间内，则使用如下配置
                      <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
                            ...
                            <property name="filters" value="stat,wall"/>
                      </bean>

                   4.3指定dbType
                      有时候，一些应用框架做了自己的JDBC Proxy Driver，是的DruidDataSource无法正确识别数据库的类型，则需要特别指定，如下：
                          <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
                                <property name="dbType" value="mysql" />
                          </bean>
                          <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
                            ...
                            <property name="proxyFilters">
                                <list>
                                    <ref bean="wall-filter"/>
                                </list>
                            </property>
                          </bean>
                  4.4指定配置装载的目录
                     缺省情况下，配置装载的目录如下：
                     数据库类型	目录
                     mysql	META-INF/druid/wall/mysql
                     oracle	META-INF/druid/wall/oracle
                     sqlserver	META-INF/druid/wall/sqlserver
                     postgres	META-INF/druid/wall/postgres

                     从配置目录中以下文件中读取配置：
                       deny-variant.txt
                       deny-schema.txt
                       deny-function.txt
                       deny-table.txt
                       deny-object.txt
                     指定配置装载的目录是可以指定，例如：
                      <bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig" init-method="init">
                           <!-- 指定配置装载的目录  -->
                           <property name="dir" value="META-INF/druid/wall/mysql" />
                       </bean>

                       <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
                           <property name="dbType" value="mysql" />
                           <property name="config" ref="wall-filter-config" />
                       </bean>

                       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
                           ...
                           <property name="proxyFilters">
                               <list>
                                   <ref bean="wall-filter"/>
                               </list>
                           </property>
                       </bean>
                    4.5 WallConfig详细说明
                        本身配置
                        配置项	缺省值
                        dir	按照dbType分别配置:
                        mysql : META-INF/druid/wall/mysql
                        oracle : META-INF/druid/wall/oracle
                        sqlserver : META-INF/druid/wall/sqlserver

                        拦截配置－语句
                        配置项	缺省值	描述
                        selelctAllow	true	是否允许执行SELECT语句
                        selectAllColumnAllow	true	是否允许执行SELECT * FROM T这样的语句。如果设置为false，不允许执行select * from t，但select * from (select id, name from t) a。这个选项是防御程序通过调用select *获得数据表的结构信息。
                        selectIntoAllow	true	SELECT查询中是否允许INTO字句
                        deleteAllow	true	是否允许执行DELETE语句
                        updateAllow	true	是否允许执行UPDATE语句
                        insertAllow	true	是否允许执行INSERT语句
                        replaceAllow	true	是否允许执行REPLACE语句
                        mergeAllow	true	是否允许执行MERGE语句，这个只在Oracle中有用
                        callAllow	true	是否允许通过jdbc的call语法调用存储过程
                        setAllow	true	是否允许使用SET语法
                        truncateAllow	true	truncate语句是危险，缺省打开，若需要自行关闭
                        createTableAllow	true	是否允许创建表
                        alterTableAllow	true	是否允许执行Alter Table语句
                        dropTableAllow	true	是否允许修改表
                        commentAllow	false	是否允许语句中存在注释，Oracle的用户不用担心，Wall能够识别hints和注释的区别
                        noneBaseStatementAllow	false	是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。
                        multiStatementAllow	false	是否允许一次执行多条语句，缺省关闭
                        useAllow	true	是否允许执行mysql的use语句，缺省打开
                        describeAllow	true	是否允许执行mysql的describe语句，缺省打开
                        showAllow	true	是否允许执行mysql的show语句，缺省打开
                        commitAllow	true	是否允许执行commit操作
                        rollbackAllow	true	是否允许执行roll back操作

                        如果把selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow都设置为false，这就是一个只读数据源了。

                        ## 拦截配置－永真条件
                        配置项	缺省值	描述
                        selectWhereAlwayTrueCheck	true	检查SELECT语句的WHERE子句是否是一个永真条件
                        selectHavingAlwayTrueCheck	true	检查SELECT语句的HAVING子句是否是一个永真条件
                        deleteWhereAlwayTrueCheck	true	检查DELETE语句的WHERE子句是否是一个永真条件
                        deleteWhereNoneCheck	false	检查DELETE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险
                        updateWhereAlayTrueCheck	true	检查UPDATE语句的WHERE子句是否是一个永真条件
                        updateWhereNoneCheck	false	检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险
                        conditionAndAlwayTrueAllow	false	检查查询条件(WHERE/HAVING子句)中是否包含AND永真条件
                        conditionAndAlwayFalseAllow	false	检查查询条件(WHERE/HAVING子句)中是否包含AND永假条件
                        conditionLikeTrueAllow	true	检查查询条件(WHERE/HAVING子句)中是否包含LIKE永真条件

                        其他拦截配置
                        配置项	缺省值	描述
                        selectIntoOutfileAllow	false	SELECT ... INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的
                        selectUnionCheck	true	检测SELECT UNION
                        selectMinusCheck	true	检测SELECT MINUS
                        selectExceptCheck	true	检测SELECT EXCEPT
                        selectIntersectCheck	true	检测SELECT INTERSECT
                        mustParameterized	false	是否必须参数化，如果为True，则不允许类似WHERE ID = 1这种不参数化的SQL
                        strictSyntaxCheck	true	是否进行严格的语法检测，Druid SQL Parser在某些场景不能覆盖所有的SQL语法，出现解析SQL出错，可以临时把这个选项设置为false，同时把SQL反馈给Druid的开发者。
                        conditionOpXorAllow	false	查询条件中是否允许有XOR条件。XOR不常用，很难判断永真或者永假，缺省不允许。
                        conditionOpBitwseAllow	true	查询条件中是否允许有"&"、"~"、"|"、"^"运算符。
                        conditionDoubleConstAllow	false	查询条件中是否允许连续两个常量运算表达式
                        minusAllow	true	是否允许SELECT * FROM A MINUS SELECT * FROM B这样的语句
                        intersectAllow	true	是否允许SELECT * FROM A INTERSECT SELECT * FROM B这样的语句
                        constArithmeticAllow	true	拦截常量运算的条件，比如说WHERE FID = 3 - 1，其中"3 - 1"是常量运算表达式。
                        limitZeroAllow	false	是否允许limit 0这样的语句
                        selectLimit	-1	配置最大返回行数，如果select语句没有指定最大返回行数，会自动修改selct添加返回限制

                        禁用对象检测配置
                        配置项	缺省值	描述
                        tableCheck	true	检测是否使用了禁用的表
                        schemaCheck	true	检测是否使用了禁用的Schema
                        functionCheck	true	检测是否使用了禁用的函数
                        objectCheck	true	检测是否使用了“禁用对对象”
                        variantCheck	true	检测是否使用了“禁用的变量”
                        readOnlyTables	空	指定的表只读，不能够在SELECT INTO、DELETE、UPDATE、INSERT、MERGE中作为"被修改表"出现<

                        Jdbc相关配置
                        配置项	缺省值	描述
                        metadataAllow	true	是否允许调用Connection.getMetadata方法，这个方法调用会暴露数据库的表信息
                        wrapAllow	true	是否允许调用Connection/Statement/ResultSet的isWrapFor和unwrap方法，这两个方法调用，使得有办法拿到原生驱动的对象，绕过WallFilter的检测直接执行SQL。


                        WallFilter配置说明
                        配置项	缺省值	描述
                        logViolation	false	对被认为是攻击的SQL进行LOG.error输出
                        throwException	true	对被认为是攻击的SQL抛出SQLException
                        config
                        provider
                        刚开始引入WallFilter的时候，把logViolation设置为true，而throwException设置为false。就可以观察是否存在违规的情况，同时不影响业务运行。
                        .
    b.合并统计没有参数化的SQL(StatFilter的mergeSql)
                 当你程序中存在没有参数化的sql执行时，sql统计的效果会不好。比如：
                 select * from t where id = 1
                 select * from t where id = 2
                 select * from t where id = 3
                 在统计中，显示为3条sql，这不是我们希望要的效果。StatFilter提供合并的功能，能够将这3个SQL合并为如下的SQL
                 select * from t where id = ?
                 配置StatFilter的mergeSql属性
                 <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
                 	<property name="mergeSql" value="true" />
                 </bean>
                 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
                 	init-method="init" destroy-method="close">
                 	... ...
                 	<property name="proxyFilters">
                 		<list>
                 			<ref bean="stat-filter" />
                 		</list>
                 	</property>
                 </bean>
                 StatFilter支持一种简化配置方式，和上面的配置等同的。如下：

                   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
                   	... ...
                   	<property name="filters" value="mergeStat" />
                   </bean>
                 mergeStat是的MergeStatFilter缩写，我们看MergeStatFilter的实现：

                   public class MergeStatFilter extends StatFilter {
                   	public MergeStatFilter() {
                   		super.setMergeSql(true);
                   	}
                   }
                 从实现代码来看，仅仅是一个mergeSql的缺省值。

                 也可以通过connectProperties属性来打开mergeSql功能，例如：

                   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
                   	... ...
                   	<property name="filters" value="stat" />
                   	<property name="connectionProperties" value="druid.stat.mergeSql=true" />
                   </bean>
                 或者通过增加JVM的参数配置:
                 -Ddruid.stat.mergeSql=true

    c.SQL格式化:SQLUtils 基于语义分析的格式化因此更加智能
           package com.alibaba.druid.sql;
           public class SQLUtils {
               String format(String sq, String dbType);
               String format(String sq, String dbType, FormatOption option);
           }
    d.分库分表
    
    
 
